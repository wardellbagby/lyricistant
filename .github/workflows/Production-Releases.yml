name: 'Production Releases'
'on':
  push:
    tags:
      - 'v*'
jobs:
  test:
    name: 'Test'
    runs-on: 'ubuntu-20.04'
    steps:
      - name: 'Mask any potential PII'
        run: "echo \"::add-mask::${{ secrets.PHONE_NUMBER }}\"\necho \"::add-mask::${{ secrets.APPLE_ID }}\"\necho \"::add-mask::${{ secrets.FASTLANE_USER }}\""
      - name: 'Checkout the current branch'
        uses: 'actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f'
      - name: 'Setup Node.js - 15.x.x'
        uses: 'actions/setup-node@38d90ce44d5275ad62cc48384b3d8a58c500bb5f'
        with:
          node-version: '>=15.10'
          cache: 'npm'
      - name: 'Install Gulp'
        run: 'npm install -g gulp@4.0.2'
      - name: 'Set virtual display if Ubuntu'
        if: 'runner.os == ''Linux'''
        run: 'Xvfb :99 &'
      - name: 'Install Node modules'
        run: 'npm ci'
      - name: 'Run all tests'
        run: 'gulp testAll --max-old-space-size=8192'
        env:
          DISPLAY: ':99'
      - name: 'Upload build artifacts if failed'
        if: 'failure()'
        uses: 'actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074'
        with:
          path: "apps/**/dist/\ndist/"
  deployWeb:
    name: 'Deploy Web to lyricistant.app'
    runs-on: 'ubuntu-20.04'
    needs:
      - 'test'
    if: '${{ contains(github.ref, ''web'') || endsWith(github.ref, ''0'') || endsWith(github.ref, ''1'') || endsWith(github.ref, ''2'') || endsWith(github.ref, ''3'') || endsWith(github.ref, ''4'') || endsWith(github.ref, ''5'') || endsWith(github.ref, ''6'') || endsWith(github.ref, ''7'') || endsWith(github.ref, ''8'') || endsWith(github.ref, ''9'') }}'
    steps:
      - name: 'Mask any potential PII'
        run: "echo \"::add-mask::${{ secrets.PHONE_NUMBER }}\"\necho \"::add-mask::${{ secrets.APPLE_ID }}\"\necho \"::add-mask::${{ secrets.FASTLANE_USER }}\""
      - name: 'Checkout the current branch'
        uses: 'actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f'
      - name: 'Setup Node.js - 15.x.x'
        uses: 'actions/setup-node@38d90ce44d5275ad62cc48384b3d8a58c500bb5f'
        with:
          node-version: '>=15.10'
          cache: 'npm'
      - name: 'Install Gulp'
        run: 'npm install -g gulp@4.0.2'
      - name: 'Install Node modules'
        run: 'npm ci'
      - name: 'Build Web'
        run: 'gulp buildWeb --max-old-space-size=8192'
      - name: 'Deploy Web'
        uses: 'peaceiris/actions-gh-pages@068dc23d9710f1ba62e86896f84735d869951305'
        with:
          personal_token: '${{ secrets.LYRICISTANT_TOKEN }}'
          publish_branch: 'gh-pages'
          publish_dir: 'apps/web/dist/production/'
          force_orphan: true
          cname: 'lyricistant.app'
          external_repository: 'wardellbagby/lyricistant-website'
  buildIOSApp:
    name: 'Build iOS'
    runs-on: 'macos-10.15'
    steps:
      - name: 'Mask any potential PII'
        run: "echo \"::add-mask::${{ secrets.PHONE_NUMBER }}\"\necho \"::add-mask::${{ secrets.APPLE_ID }}\"\necho \"::add-mask::${{ secrets.FASTLANE_USER }}\""
      - name: 'Checkout the current branch'
        uses: 'actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f'
      - name: 'Setup Node.js - 15.x.x'
        uses: 'actions/setup-node@38d90ce44d5275ad62cc48384b3d8a58c500bb5f'
        with:
          node-version: '>=15.10'
          cache: 'npm'
      - name: 'Install Gulp'
        run: 'npm install -g gulp@4.0.2'
      - name: 'Setup Ruby'
        uses: 'ruby/setup-ruby@cae9d256bd9e1300706428bfd1ce211fa1388c4b'
        with:
          bundler-cache: true
      - name: 'Install Fastlane'
        run: 'gem install bundler && bundle install'
      - name: 'Install Node modules'
        run: 'npm ci'
      - name: 'Create App Store Connect credentials'
        run: 'echo "${{ secrets.APP_STORE_CONNECT_KEY }}" | base64 --decode > apps/mobile/ios/authkey.p8'
      - name: 'Bundle Mobile'
        run: 'gulp bundleIOS --max-old-space-size=8192'
        env:
          NIGHTLY: false
      - name: 'Build iOS'
        run: 'bundle exec fastlane ios release deploy:true'
        env:
          APP_STORE_KEY_ID: '${{ secrets.APP_STORE_KEY_ID }}'
          APP_STORE_ISSUER_ID: '${{ secrets.APP_STORE_ISSUER_ID }}'
          FIRST_NAME: 'Wardell'
          LAST_NAME: 'Bagby'
          PHONE: '${{ secrets.PHONE }}'
          EMAIL: '${{ secrets.APPLE_ID }}'
          MATCH_GIT_BASIC_AUTHORIZATION: '${{ secrets.MATCH_GIT_BASIC_AUTHORIZATION }}'
          MATCH_PASSWORD: '${{ secrets.MATCH_PASSWORD }}'
      - name: 'Upload iOS app'
        uses: 'actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074'
        with:
          name: 'ios-app'
          path: 'apps/mobile/dist/ios/*.ipa'
    needs:
      - 'test'
    if: '${{ contains(github.ref, ''ios'') || endsWith(github.ref, ''0'') || endsWith(github.ref, ''1'') || endsWith(github.ref, ''2'') || endsWith(github.ref, ''3'') || endsWith(github.ref, ''4'') || endsWith(github.ref, ''5'') || endsWith(github.ref, ''6'') || endsWith(github.ref, ''7'') || endsWith(github.ref, ''8'') || endsWith(github.ref, ''9'') }}'
  buildAndroidApp:
    name: 'Build Android'
    runs-on: 'ubuntu-20.04'
    steps:
      - name: 'Mask any potential PII'
        run: "echo \"::add-mask::${{ secrets.PHONE_NUMBER }}\"\necho \"::add-mask::${{ secrets.APPLE_ID }}\"\necho \"::add-mask::${{ secrets.FASTLANE_USER }}\""
      - name: 'Checkout the current branch'
        uses: 'actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f'
      - name: 'Setup Node.js - 15.x.x'
        uses: 'actions/setup-node@38d90ce44d5275ad62cc48384b3d8a58c500bb5f'
        with:
          node-version: '>=15.10'
          cache: 'npm'
      - name: 'Install Gulp'
        run: 'npm install -g gulp@4.0.2'
      - name: 'Setup Ruby'
        uses: 'ruby/setup-ruby@cae9d256bd9e1300706428bfd1ce211fa1388c4b'
        with:
          bundler-cache: true
      - name: 'Install Fastlane'
        run: 'gem install bundler && bundle install'
      - name: 'Install Node modules'
        run: 'npm ci'
      - name: 'Populate keystore'
        run: 'echo "${{ secrets.KEYSTORE }}" | base64 --decode > apps/mobile/android/android.keystore'
      - name: 'Populate keystore properties'
        run: 'echo "${{ secrets.KEYSTORE_PROPERTIES }}" | base64 --decode > apps/mobile/android/keystore.properties'
      - name: 'Populate Play Store credentials'
        run: 'echo "${{ secrets.PLAY_STORE_CREDS }}" | base64 --decode > play-store-credentials.json'
      - name: 'Bundle Mobile'
        run: 'gulp bundleAndroid --max-old-space-size=8192'
        env:
          NIGHTLY: false
      - name: 'Build Android'
        run: 'bundle exec fastlane android release deploy:true'
      - name: 'Upload Android app'
        uses: 'actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074'
        with:
          name: 'android-app'
          path: 'apps/mobile/dist/android/*.apk'
    needs:
      - 'test'
    if: '${{ contains(github.ref, ''android'') || endsWith(github.ref, ''0'') || endsWith(github.ref, ''1'') || endsWith(github.ref, ''2'') || endsWith(github.ref, ''3'') || endsWith(github.ref, ''4'') || endsWith(github.ref, ''5'') || endsWith(github.ref, ''6'') || endsWith(github.ref, ''7'') || endsWith(github.ref, ''8'') || endsWith(github.ref, ''9'') }}'
  buildElectronApps:
    name: 'Build Electron Apps'
    runs-on: 'macos-10.15'
    steps:
      - name: 'Mask any potential PII'
        run: "echo \"::add-mask::${{ secrets.PHONE_NUMBER }}\"\necho \"::add-mask::${{ secrets.APPLE_ID }}\"\necho \"::add-mask::${{ secrets.FASTLANE_USER }}\""
      - name: 'Checkout the current branch'
        uses: 'actions/checkout@5a4ac9002d0be2fb38bd78e4b4dbde5606d7042f'
      - name: 'Setup Node.js - 15.x.x'
        uses: 'actions/setup-node@38d90ce44d5275ad62cc48384b3d8a58c500bb5f'
        with:
          node-version: '>=15.10'
          cache: 'npm'
      - name: 'Install Gulp'
        run: 'npm install -g gulp@4.0.2'
      - name: 'Install Node modules'
        run: 'npm ci'
      - name: 'Build Electron apps'
        uses: 'nick-invision/retry@45ba062d357edb3b29c4a94b456b188716f61020'
        env:
          CSC_LINK: '${{ secrets.MACOS_CERT }}'
          CSC_KEY_PASSWORD: '${{ secrets.MACOS_CERT_PASSWORD }}'
          APPLE_ID: '${{ secrets.APPLE_ID }}'
          APPLE_ID_PASSWORD: '${{ secrets.APPLE_ID_PASSWORD }}'
          NIGHTLY: false
        with:
          timeout_minutes: 20
          max_attempts: 3
          command: 'gulp buildAllElectronApps --max-old-space-size=8192'
      - name: 'Upload Electron apps'
        uses: 'actions/upload-artifact@27121b0bdffd731efa15d66772be8dc71245d074'
        with:
          name: 'electron-apps'
          path: 'apps/electron/dist/production/app/*.*'
    needs:
      - 'test'
    if: '${{ contains(github.ref, ''electron'') || endsWith(github.ref, ''0'') || endsWith(github.ref, ''1'') || endsWith(github.ref, ''2'') || endsWith(github.ref, ''3'') || endsWith(github.ref, ''4'') || endsWith(github.ref, ''5'') || endsWith(github.ref, ''6'') || endsWith(github.ref, ''7'') || endsWith(github.ref, ''8'') || endsWith(github.ref, ''9'') }}'
  createGithubRelease:
    name: 'Create Github Release'
    runs-on: 'ubuntu-20.04'
    if: 'always()'
    needs:
      - 'buildIOSApp'
      - 'buildElectronApps'
      - 'buildAndroidApp'
    steps:
      - name: 'Download iOS app'
        uses: 'actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60'
        with:
          name: 'ios-app'
          path: '/tmp/artifacts'
        if: 'needs.buildIOSApp.result == ''success'''
      - name: 'Download Electron apps'
        uses: 'actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60'
        with:
          name: 'electron-apps'
          path: '/tmp/artifacts'
        if: 'needs.buildElectronApps.result == ''success'''
      - name: 'Download Android app'
        uses: 'actions/download-artifact@3be87be14a055c47b01d3bd88f8fe02320a9bb60'
        with:
          name: 'android-app'
          path: '/tmp/artifacts'
        if: 'needs.buildAndroidApp.result == ''success'''
      - name: 'Create Github release'
        uses: 'marvinpinto/action-automatic-releases@5bd3ab50e845612718d9a3a3c954dc99ba6868a4'
        with:
          repo_token: '${{ secrets.GITHUB_TOKEN }}'
          prerelease: false
          files: '/tmp/artifacts/*.*'
        if: '${{ needs.buildIOSApp.result == ''success'' || needs.buildElectronApps.result == ''success'' || needs.buildAndroidApp.result == ''success'' }}'
