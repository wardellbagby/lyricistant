{"version":3,"file":"646.renderer.js","mappings":"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","sources":["webpack://lyricistant/./node_modules/comlink/dist/esm/comlink.mjs","webpack://lyricistant/./apps/web/packages/platform/renderer.ts","webpack://lyricistant/./packages/core-dom-platform/main/platform/UiConfigProvider.ts","webpack://lyricistant/./node_modules/@wessberg/di/dist/index.js","webpack://lyricistant/./apps/web/packages/platform/AppComponent.ts","webpack://lyricistant/./packages/common-platform/main/AppComponents.ts","webpack://lyricistant/./apps/web/packages/platform/index.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n * SPDX-License-Identifier: Apache-2.0\n */\nconst proxyMarker = Symbol(\"Comlink.proxy\");\nconst createEndpoint = Symbol(\"Comlink.endpoint\");\nconst releaseProxy = Symbol(\"Comlink.releaseProxy\");\nconst finalizer = Symbol(\"Comlink.finalizer\");\nconst throwMarker = Symbol(\"Comlink.thrown\");\nconst isObject = (val) => (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler = {\n    canHandle: (val) => isObject(val) && val[proxyMarker],\n    serialize(obj) {\n        const { port1, port2 } = new MessageChannel();\n        expose(obj, port1);\n        return [port2, [port2]];\n    },\n    deserialize(port) {\n        port.start();\n        return wrap(port);\n    },\n};\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler = {\n    canHandle: (value) => isObject(value) && throwMarker in value,\n    serialize({ value }) {\n        let serialized;\n        if (value instanceof Error) {\n            serialized = {\n                isError: true,\n                value: {\n                    message: value.message,\n                    name: value.name,\n                    stack: value.stack,\n                },\n            };\n        }\n        else {\n            serialized = { isError: false, value };\n        }\n        return [serialized, []];\n    },\n    deserialize(serialized) {\n        if (serialized.isError) {\n            throw Object.assign(new Error(serialized.value.message), serialized.value);\n        }\n        throw serialized.value;\n    },\n};\n/**\n * Allows customizing the serialization of certain values.\n */\nconst transferHandlers = new Map([\n    [\"proxy\", proxyTransferHandler],\n    [\"throw\", throwTransferHandler],\n]);\nfunction isAllowedOrigin(allowedOrigins, origin) {\n    for (const allowedOrigin of allowedOrigins) {\n        if (origin === allowedOrigin || allowedOrigin === \"*\") {\n            return true;\n        }\n        if (allowedOrigin instanceof RegExp && allowedOrigin.test(origin)) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction expose(obj, ep = globalThis, allowedOrigins = [\"*\"]) {\n    ep.addEventListener(\"message\", function callback(ev) {\n        if (!ev || !ev.data) {\n            return;\n        }\n        if (!isAllowedOrigin(allowedOrigins, ev.origin)) {\n            console.warn(`Invalid origin '${ev.origin}' for comlink proxy`);\n            return;\n        }\n        const { id, type, path } = Object.assign({ path: [] }, ev.data);\n        const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n        let returnValue;\n        try {\n            const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n            const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n            switch (type) {\n                case \"GET\" /* MessageType.GET */:\n                    {\n                        returnValue = rawValue;\n                    }\n                    break;\n                case \"SET\" /* MessageType.SET */:\n                    {\n                        parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n                        returnValue = true;\n                    }\n                    break;\n                case \"APPLY\" /* MessageType.APPLY */:\n                    {\n                        returnValue = rawValue.apply(parent, argumentList);\n                    }\n                    break;\n                case \"CONSTRUCT\" /* MessageType.CONSTRUCT */:\n                    {\n                        const value = new rawValue(...argumentList);\n                        returnValue = proxy(value);\n                    }\n                    break;\n                case \"ENDPOINT\" /* MessageType.ENDPOINT */:\n                    {\n                        const { port1, port2 } = new MessageChannel();\n                        expose(obj, port2);\n                        returnValue = transfer(port1, [port1]);\n                    }\n                    break;\n                case \"RELEASE\" /* MessageType.RELEASE */:\n                    {\n                        returnValue = undefined;\n                    }\n                    break;\n                default:\n                    return;\n            }\n        }\n        catch (value) {\n            returnValue = { value, [throwMarker]: 0 };\n        }\n        Promise.resolve(returnValue)\n            .catch((value) => {\n            return { value, [throwMarker]: 0 };\n        })\n            .then((returnValue) => {\n            const [wireValue, transferables] = toWireValue(returnValue);\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n            if (type === \"RELEASE\" /* MessageType.RELEASE */) {\n                // detach and deactive after sending release response above.\n                ep.removeEventListener(\"message\", callback);\n                closeEndPoint(ep);\n                if (finalizer in obj && typeof obj[finalizer] === \"function\") {\n                    obj[finalizer]();\n                }\n            }\n        })\n            .catch((error) => {\n            // Send Serialization Error To Caller\n            const [wireValue, transferables] = toWireValue({\n                value: new TypeError(\"Unserializable return value\"),\n                [throwMarker]: 0,\n            });\n            ep.postMessage(Object.assign(Object.assign({}, wireValue), { id }), transferables);\n        });\n    });\n    if (ep.start) {\n        ep.start();\n    }\n}\nfunction isMessagePort(endpoint) {\n    return endpoint.constructor.name === \"MessagePort\";\n}\nfunction closeEndPoint(endpoint) {\n    if (isMessagePort(endpoint))\n        endpoint.close();\n}\nfunction wrap(ep, target) {\n    const pendingListeners = new Map();\n    ep.addEventListener(\"message\", function handleMessage(ev) {\n        const { data } = ev;\n        if (!data || !data.id) {\n            return;\n        }\n        const resolver = pendingListeners.get(data.id);\n        if (!resolver) {\n            return;\n        }\n        try {\n            resolver(data);\n        }\n        finally {\n            pendingListeners.delete(data.id);\n        }\n    });\n    return createProxy(ep, pendingListeners, [], target);\n}\nfunction throwIfProxyReleased(isReleased) {\n    if (isReleased) {\n        throw new Error(\"Proxy has been released and is not useable\");\n    }\n}\nfunction releaseEndpoint(ep) {\n    return requestResponseMessage(ep, new Map(), {\n        type: \"RELEASE\" /* MessageType.RELEASE */,\n    }).then(() => {\n        closeEndPoint(ep);\n    });\n}\nconst proxyCounter = new WeakMap();\nconst proxyFinalizers = \"FinalizationRegistry\" in globalThis &&\n    new FinalizationRegistry((ep) => {\n        const newCount = (proxyCounter.get(ep) || 0) - 1;\n        proxyCounter.set(ep, newCount);\n        if (newCount === 0) {\n            releaseEndpoint(ep);\n        }\n    });\nfunction registerProxy(proxy, ep) {\n    const newCount = (proxyCounter.get(ep) || 0) + 1;\n    proxyCounter.set(ep, newCount);\n    if (proxyFinalizers) {\n        proxyFinalizers.register(proxy, ep, proxy);\n    }\n}\nfunction unregisterProxy(proxy) {\n    if (proxyFinalizers) {\n        proxyFinalizers.unregister(proxy);\n    }\n}\nfunction createProxy(ep, pendingListeners, path = [], target = function () { }) {\n    let isProxyReleased = false;\n    const proxy = new Proxy(target, {\n        get(_target, prop) {\n            throwIfProxyReleased(isProxyReleased);\n            if (prop === releaseProxy) {\n                return () => {\n                    unregisterProxy(proxy);\n                    releaseEndpoint(ep);\n                    pendingListeners.clear();\n                    isProxyReleased = true;\n                };\n            }\n            if (prop === \"then\") {\n                if (path.length === 0) {\n                    return { then: () => proxy };\n                }\n                const r = requestResponseMessage(ep, pendingListeners, {\n                    type: \"GET\" /* MessageType.GET */,\n                    path: path.map((p) => p.toString()),\n                }).then(fromWireValue);\n                return r.then.bind(r);\n            }\n            return createProxy(ep, pendingListeners, [...path, prop]);\n        },\n        set(_target, prop, rawValue) {\n            throwIfProxyReleased(isProxyReleased);\n            // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n            // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n            const [value, transferables] = toWireValue(rawValue);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"SET\" /* MessageType.SET */,\n                path: [...path, prop].map((p) => p.toString()),\n                value,\n            }, transferables).then(fromWireValue);\n        },\n        apply(_target, _thisArg, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const last = path[path.length - 1];\n            if (last === createEndpoint) {\n                return requestResponseMessage(ep, pendingListeners, {\n                    type: \"ENDPOINT\" /* MessageType.ENDPOINT */,\n                }).then(fromWireValue);\n            }\n            // We just pretend that `bind()` didn’t happen.\n            if (last === \"bind\") {\n                return createProxy(ep, pendingListeners, path.slice(0, -1));\n            }\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"APPLY\" /* MessageType.APPLY */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n        construct(_target, rawArgumentList) {\n            throwIfProxyReleased(isProxyReleased);\n            const [argumentList, transferables] = processArguments(rawArgumentList);\n            return requestResponseMessage(ep, pendingListeners, {\n                type: \"CONSTRUCT\" /* MessageType.CONSTRUCT */,\n                path: path.map((p) => p.toString()),\n                argumentList,\n            }, transferables).then(fromWireValue);\n        },\n    });\n    registerProxy(proxy, ep);\n    return proxy;\n}\nfunction myFlat(arr) {\n    return Array.prototype.concat.apply([], arr);\n}\nfunction processArguments(argumentList) {\n    const processed = argumentList.map(toWireValue);\n    return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\nconst transferCache = new WeakMap();\nfunction transfer(obj, transfers) {\n    transferCache.set(obj, transfers);\n    return obj;\n}\nfunction proxy(obj) {\n    return Object.assign(obj, { [proxyMarker]: true });\n}\nfunction windowEndpoint(w, context = globalThis, targetOrigin = \"*\") {\n    return {\n        postMessage: (msg, transferables) => w.postMessage(msg, targetOrigin, transferables),\n        addEventListener: context.addEventListener.bind(context),\n        removeEventListener: context.removeEventListener.bind(context),\n    };\n}\nfunction toWireValue(value) {\n    for (const [name, handler] of transferHandlers) {\n        if (handler.canHandle(value)) {\n            const [serializedValue, transferables] = handler.serialize(value);\n            return [\n                {\n                    type: \"HANDLER\" /* WireValueType.HANDLER */,\n                    name,\n                    value: serializedValue,\n                },\n                transferables,\n            ];\n        }\n    }\n    return [\n        {\n            type: \"RAW\" /* WireValueType.RAW */,\n            value,\n        },\n        transferCache.get(value) || [],\n    ];\n}\nfunction fromWireValue(value) {\n    switch (value.type) {\n        case \"HANDLER\" /* WireValueType.HANDLER */:\n            return transferHandlers.get(value.name).deserialize(value.value);\n        case \"RAW\" /* WireValueType.RAW */:\n            return value.value;\n    }\n}\nfunction requestResponseMessage(ep, pendingListeners, msg, transfers) {\n    return new Promise((resolve) => {\n        const id = generateUUID();\n        pendingListeners.set(id, resolve);\n        if (ep.start) {\n            ep.start();\n        }\n        ep.postMessage(Object.assign({ id }, msg), transfers);\n    });\n}\nfunction generateUUID() {\n    return new Array(4)\n        .fill(0)\n        .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n        .join(\"-\");\n}\n\nexport { createEndpoint, expose, finalizer, proxy, proxyMarker, releaseProxy, transfer, transferHandlers, windowEndpoint, wrap };\n//# sourceMappingURL=comlink.mjs.map\n","import { Renderer } from '@web-common/Renderer';\nimport { Endpoint, wrap } from 'comlink';\n\nexport const renderer: Renderer = wrap(self as Endpoint);\n","import {\n  TitleFormatter,\n  UiConfigProvider,\n} from '@lyricistant/common-platform/ui/UiConfigProviders';\n\nexport const provideUiConfig: UiConfigProvider = () => ({\n  showDownload: true,\n  showOpen: !!Blob && !!File,\n  showBrowserWarning: true,\n  promptOnUrlChange: true,\n});\n\nexport const formatTitle: TitleFormatter = (filename: string) => {\n  if (filename && filename.trim().length > 0) {\n    return `Lyricistant - ${filename}`;\n  }\n  return 'Lyricistant';\n};\n","// src/constant.ts\nvar CONSTRUCTOR_ARGUMENTS_SYMBOL_IDENTIFIER = `___CTOR_ARGS___`;\nvar CONSTRUCTOR_ARGUMENTS_SYMBOL = Symbol.for(CONSTRUCTOR_ARGUMENTS_SYMBOL_IDENTIFIER);\nvar DI_COMPILER_ERROR_HINT = `Note: You must use DI-Compiler (https://github.com/wessberg/di-compiler) for this library to work correctly. Please consult the readme for instructions on how to install and configure it for your project.`;\n\n// src/error.ts\nvar InstantiationError = class _InstantiationError extends TypeError {\n  #name = \"InstantiationError\";\n  #originalError;\n  #identifier;\n  #parentChain;\n  get [Symbol.toStringTag]() {\n    return this.#name;\n  }\n  constructor(error, { identifier, parentChain, ...options }) {\n    const message = typeof error === \"string\" ? error : error instanceof Error ? error.message : typeof error === \"object\" && error != null && \"message\" in error && typeof error.message === \"string\" ? error.message : void 0;\n    const stack = typeof error === \"string\" ? void 0 : error instanceof Error ? error.stack : typeof error === \"object\" && error != null && \"stack\" in error && typeof error.stack === \"string\" ? error.stack : void 0;\n    const originalError = error instanceof Error ? error : { message, stack };\n    super(message, options);\n    this.#identifier = identifier;\n    this.#originalError = originalError;\n    this.#parentChain = parentChain != null && parentChain.length > 0 ? parentChain.map((item) => typeof item === \"string\" ? item : item.identifier) : [this.#identifier];\n    this.name = this[Symbol.toStringTag];\n    let currentOriginalError = this.#originalError;\n    while (currentOriginalError instanceof _InstantiationError) {\n      currentOriginalError = currentOriginalError.#originalError;\n    }\n    const lastService = this.#parentChain[this.#parentChain.length - 1];\n    const head = `Could not instantiate service: '${lastService}'`;\n    const body = currentOriginalError.message == null || currentOriginalError.message.length < 1 ? \"\" : `: ${currentOriginalError.message}`;\n    const tail = this.#parentChain.length > 1 ? ` Dependency chain: ${this.#parentChain.join(\" -> \")}` : \"\";\n    this.message = `${head}${body}${tail}`;\n    if (currentOriginalError.stack != null) {\n      this.stack = currentOriginalError.stack;\n    }\n  }\n};\n\n// src/util.ts\nfunction isClass(item) {\n  if (typeof item !== \"function\") {\n    return false;\n  }\n  const descriptor = Object.getOwnPropertyDescriptor(item, \"prototype\");\n  return !!descriptor && !descriptor.writable;\n}\nfunction isCustomConstructableService(item) {\n  return !isClass(item) && typeof item === \"function\";\n}\n\n// src/di-container.ts\nvar DIContainer = class {\n  get [Symbol.toStringTag]() {\n    return \"DIContainer\";\n  }\n  /**\n   * A map between interface names and the services that should be dependency injected\n   */\n  #constructorArguments = /* @__PURE__ */ new Map();\n  /**\n   * A Map between identifying names for services and their IRegistrationRecords.\n   */\n  #serviceRegistry = /* @__PURE__ */ new Map();\n  /**\n   * A map between identifying names for services and concrete instances of their implementation.\n   */\n  #instances = /* @__PURE__ */ new Map();\n  registerSingleton(newExpression, options) {\n    if (options == null) {\n      throw new ReferenceError(`2 arguments required, but only 0 present. ${DI_COMPILER_ERROR_HINT}`);\n    }\n    if (newExpression == null) {\n      return this.#register(\"SINGLETON\", newExpression, options);\n    } else {\n      return this.#register(\"SINGLETON\", newExpression, options);\n    }\n  }\n  registerTransient(newExpression, options) {\n    if (options == null) {\n      throw new ReferenceError(`2 arguments required, but only 0 present. ${DI_COMPILER_ERROR_HINT}`);\n    }\n    if (newExpression == null) {\n      return this.#register(\"TRANSIENT\", newExpression, options);\n    } else {\n      return this.#register(\"TRANSIENT\", newExpression, options);\n    }\n  }\n  /**\n   * Gets an instance of the service matching the interface given as a generic type parameter.\n   * For example, 'container.get<IFoo>()' returns a concrete instance of the implementation associated with the\n   * generic interface name.\n   *\n   * You should not pass any options to the method if using the compiler. It will do that automatically.\n   */\n  get(options) {\n    if (options == null) {\n      throw new ReferenceError(`1 argument required, but only 0 present. ${DI_COMPILER_ERROR_HINT}`);\n    }\n    if (!this.has(options)) {\n      throw new InstantiationError(`The service wasn't found in the registry.`, { identifier: options.identifier });\n    }\n    return this.#constructInstance(options);\n  }\n  /**\n   * Returns true if a service has been registered matching the interface given as a generic type parameter.\n   * For example, 'container.get<IFoo>()' returns a concrete instance of the implementation associated with the\n   * generic interface name.\n   *\n   * You should not pass any options to the method if using the compiler. It will do that automatically.\n   */\n  // @ts-expect-error The 'T' type parameter is required for compile-time reflection, even though it is not part of the signature.\n  has(options) {\n    if (options == null) {\n      throw new ReferenceError(`1 argument required, but only 0 present. ${DI_COMPILER_ERROR_HINT}`);\n    }\n    return this.#serviceRegistry.has(options.identifier);\n  }\n  #register(kind, newExpression, options) {\n    const implementationArguments = \"implementation\" in options && options.implementation?.[CONSTRUCTOR_ARGUMENTS_SYMBOL] != null ? options.implementation[CONSTRUCTOR_ARGUMENTS_SYMBOL] : [];\n    this.#constructorArguments.set(options.identifier, implementationArguments);\n    this.#serviceRegistry.set(\n      options.identifier,\n      \"implementation\" in options && options.implementation != null ? { ...options, kind } : { ...options, kind, newExpression }\n    );\n  }\n  /**\n   * Returns true if an instance exists that matches the given identifier.\n   */\n  #hasInstance(identifier) {\n    return this.#getInstance(identifier) != null;\n  }\n  /**\n   * Gets the cached instance, if any, associated with the given identifier.\n   */\n  #getInstance(identifier) {\n    const instance = this.#instances.get(identifier);\n    return instance == null ? null : instance;\n  }\n  /**\n   * Gets an IRegistrationRecord associated with the given identifier.\n   */\n  #getRegistrationRecord(identifier) {\n    return this.#serviceRegistry.get(identifier);\n  }\n  /**\n   * Caches the given instance so that it can be retrieved in the future.\n   */\n  #setInstance(identifier, instance) {\n    this.#instances.set(identifier, instance);\n    return instance;\n  }\n  /**\n   * Gets a lazy reference to another service\n   */\n  #getLazyIdentifier(lazyPointer) {\n    return new Proxy({}, { get: (_, key) => lazyPointer()[key] });\n  }\n  /**\n   * Constructs a new instance of the given identifier and returns it.\n   * It checks the constructor arguments and injects any services it might depend on recursively.\n   */\n  #constructInstance({ identifier, parentChain = [] }) {\n    const registrationRecord = this.#getRegistrationRecord(identifier);\n    if (registrationRecord == null) {\n      return void 0;\n    }\n    if (this.#hasInstance(identifier) && registrationRecord.kind === \"SINGLETON\") {\n      return this.#getInstance(identifier);\n    }\n    let instance;\n    const me = {\n      identifier,\n      ref: this.#getLazyIdentifier(() => instance)\n    };\n    const implementation = \"newExpression\" in registrationRecord ? registrationRecord.newExpression : registrationRecord.implementation;\n    if (isClass(implementation)) {\n      const mappedArgs = this.#constructorArguments.get(identifier);\n      if (mappedArgs == null) {\n        throw new InstantiationError(`Could not find constructor arguments. Have you registered it as a service?`, { identifier, parentChain });\n      }\n      const instanceArgs = mappedArgs.map((dep) => {\n        if (dep === void 0) return void 0;\n        const matchedParent = parentChain.find((parent) => parent.identifier === dep);\n        if (matchedParent != null) return matchedParent.ref;\n        const nextParentChain = [...parentChain, me];\n        const constructedInstance = this.#constructInstance({\n          identifier: dep,\n          parentChain: nextParentChain\n        });\n        if (constructedInstance == null && !this.has({ identifier: dep })) {\n          throw new InstantiationError(`Dependency '${dep}' was not found in the service registry.`, { identifier: me.identifier, parentChain: nextParentChain });\n        }\n        return constructedInstance;\n      });\n      instance = new implementation(...instanceArgs);\n    } else if (isCustomConstructableService(implementation)) {\n      instance = implementation();\n    } else {\n      throw new InstantiationError(`No implementation was given!`, { identifier, parentChain });\n    }\n    return registrationRecord.kind === \"SINGLETON\" ? this.#setInstance(identifier, instance) : instance;\n  }\n};\nexport {\n  CONSTRUCTOR_ARGUMENTS_SYMBOL,\n  CONSTRUCTOR_ARGUMENTS_SYMBOL_IDENTIFIER,\n  DIContainer\n};\n//# sourceMappingURL=index.js.map","import {\n  registerCommonManagers,\n  registerCommonPlatform,\n} from '@lyricistant/common-platform/AppComponents';\nimport { DOMBuffers } from '@lyricistant/core-dom-platform/platform/DOMBuffers';\nimport { DOMSystemThemeProvider } from '@lyricistant/core-dom-platform/platform/DOMSystemThemeProvider';\nimport { DOMTimes } from '@lyricistant/core-dom-platform/platform/DOMTimes';\nimport {\n  formatTitle,\n  provideUiConfig,\n} from '@lyricistant/core-dom-platform/platform/UiConfigProvider';\nimport { UnloadManager } from '@lyricistant/core-dom-platform/platform/UnloadManager';\nimport { WebAppData } from '@web-platform/implementations/WebAppData';\nimport { WebFiles } from '@web-platform/implementations/WebFiles';\nimport { WebLogger } from '@web-platform/implementations/WebLogger';\nimport { WebPreferences } from '@web-platform/implementations/WebPreferences';\nimport { WebRecentFiles } from '@web-platform/implementations/WebRecentFiles';\nimport { DIContainer } from '@wessberg/di';\nimport { WebRendererDelegate } from './RendererDelegate';\n\nconst createComponent = (): DIContainer => {\n  const component = new DIContainer();\n\n  component.registerSingleton<WebRendererDelegate>();\n  component.registerSingleton<WebLogger>();\n  component.registerSingleton<WebPreferences>();\n  component.registerSingleton<WebRecentFiles>();\n  component.registerSingleton<WebAppData>();\n  component.registerSingleton<WebFiles>();\n  component.registerSingleton<DOMSystemThemeProvider>();\n  component.registerSingleton<DOMBuffers>();\n  component.registerSingleton<DOMTimes>();\n\n  registerCommonPlatform(\n    {\n      rendererDelegate: () => component.get<WebRendererDelegate>(),\n      logger: () => component.get<WebLogger>(),\n      files: () => component.get<WebFiles>(),\n      preferences: () => component.get<WebPreferences>(),\n      titleFormatter: () => formatTitle,\n      buffers: () => component.get<DOMBuffers>(),\n      appData: () => component.get<WebAppData>(),\n      systemThemeProvider: () => component.get<DOMSystemThemeProvider>(),\n      recentFiles: () => component.get<WebRecentFiles>(),\n      uiConfigProvider: () => provideUiConfig,\n      times: () => component.get<DOMTimes>(),\n    },\n    component,\n  );\n  component.registerSingleton<UnloadManager>();\n\n  registerCommonManagers(component, component.get<UnloadManager>());\n  return component;\n};\n\nexport const appComponent = createComponent();\n","import { isUnderTest } from '@lyricistant/common/BuildModes';\nimport { RendererDelegate } from '@lyricistant/common/Delegates';\nimport { Logger } from '@lyricistant/common/Logger';\nimport { AppData } from '@lyricistant/common-platform/appdata/AppData';\nimport { Buffers } from '@lyricistant/common-platform/files/Buffers';\nimport { FileDataExtensions } from '@lyricistant/common-platform/files/extensions/FileDataExtension';\nimport { FileManager } from '@lyricistant/common-platform/files/FileManager';\nimport { Files } from '@lyricistant/common-platform/files/Files';\nimport { FileHandlers } from '@lyricistant/common-platform/files/handlers/FileHandler';\nimport { LyricistantFileHandler } from '@lyricistant/common-platform/files/handlers/LyricistantFileHandler';\nimport { TextFileHandler } from '@lyricistant/common-platform/files/handlers/TextFileHandler';\nimport { RecentFiles } from '@lyricistant/common-platform/files/RecentFiles';\nimport { UnsavedDataManager } from '@lyricistant/common-platform/files/UnsavedDataManager';\nimport { FirstLaunchManager } from '@lyricistant/common-platform/firstlaunch/FirstLaunchManager';\nimport { FileHistory } from '@lyricistant/common-platform/history/FileHistory';\nimport { FileHistoryManager } from '@lyricistant/common-platform/history/FileHistoryManager';\nimport { LogManager } from '@lyricistant/common-platform/logging/LogManager';\nimport { PlatformLogger } from '@lyricistant/common-platform/logging/PlatformLogger';\nimport { Manager } from '@lyricistant/common-platform/Manager';\nimport { Managers } from '@lyricistant/common-platform/Managers';\nimport { PreferenceManager } from '@lyricistant/common-platform/preferences/PreferenceManager';\nimport { Preferences } from '@lyricistant/common-platform/preferences/Preferences';\nimport { SystemThemeProvider } from '@lyricistant/common-platform/theme/SystemThemeProvider';\nimport {\n  Clock,\n  FakeClock,\n  RealClock,\n} from '@lyricistant/common-platform/time/Clock';\nimport { Times } from '@lyricistant/common-platform/time/Times';\nimport { UiConfigManager } from '@lyricistant/common-platform/ui/UiConfigManager';\nimport {\n  TitleFormatter,\n  UiConfigProvider,\n} from '@lyricistant/common-platform/ui/UiConfigProviders';\nimport { DIContainer } from '@wessberg/di';\n\nexport type Provider<T> = () => T;\n\nexport interface PlatformDependencies {\n  rendererDelegate: Provider<RendererDelegate>;\n  files: Provider<Files>;\n  logger: Provider<PlatformLogger>;\n  preferences: Provider<Preferences>;\n  recentFiles: Provider<RecentFiles>;\n  systemThemeProvider: Provider<SystemThemeProvider>;\n  appData: Provider<AppData>;\n  buffers: Provider<Buffers>;\n  uiConfigProvider: Provider<UiConfigProvider>;\n  titleFormatter: Provider<TitleFormatter>;\n  times: Provider<Times>;\n}\n\n/**\n * Registers all the common managers plus any extra managers that are passed in\n * so that they can be retrieved by querying `component` for {@link Managers}.\n *\n * Note: This should always be invoked after {@link registerCommonPlatform}.\n *\n * @param component The component to register the managers to.\n * @param extraManagers Extra managers the platform would like to register as well.\n */\nexport const registerCommonManagers = (\n  component: DIContainer,\n  ...extraManagers: Manager[]\n) => {\n  component.registerSingleton<Managers>(() => [\n    component.get<FileManager>(),\n    component.get<PreferenceManager>(),\n    component.get<UiConfigManager>(),\n    component.get<UnsavedDataManager>(),\n    component.get<LogManager>(),\n    component.get<FileHistoryManager>(),\n    component.get<FirstLaunchManager>(),\n    ...extraManagers,\n  ]);\n};\n\n/**\n * Register the necessary functionality and the dependencies for that\n * functionality for the common platform.\n *\n * @param dependencies The platform implementations of dependencies the common\n *   platform needs.\n * @param component The DI container to register to.\n */\nexport const registerCommonPlatform = (\n  dependencies: PlatformDependencies,\n  component: DIContainer,\n): DIContainer => {\n  component.registerTransient<Files>(dependencies.files);\n  component.registerTransient<Logger>(dependencies.logger);\n  component.registerTransient<PlatformLogger>(dependencies.logger);\n  component.registerTransient<Preferences>(dependencies.preferences);\n  component.registerTransient<RecentFiles>(dependencies.recentFiles);\n  component.registerTransient<SystemThemeProvider>(\n    dependencies.systemThemeProvider,\n  );\n  component.registerTransient<AppData>(dependencies.appData);\n  component.registerTransient<Buffers>(dependencies.buffers);\n  component.registerTransient<UiConfigProvider>(dependencies.uiConfigProvider);\n  component.registerTransient<TitleFormatter>(dependencies.titleFormatter);\n  component.registerTransient<RendererDelegate>(dependencies.rendererDelegate);\n  component.registerTransient<Times>(dependencies.times);\n\n  component.registerSingleton<FileManager>();\n  component.registerSingleton<PreferenceManager>();\n  component.registerSingleton<UiConfigManager>();\n  component.registerSingleton<UnsavedDataManager>();\n  component.registerSingleton<LogManager>();\n  component.registerSingleton<FileHistoryManager>();\n  component.registerSingleton<FirstLaunchManager>();\n\n  if (isUnderTest) {\n    component.registerSingleton<Clock, FakeClock>();\n  } else {\n    component.registerSingleton<Clock, RealClock>();\n  }\n\n  component.registerSingleton<LyricistantFileHandler>();\n  component.registerSingleton<TextFileHandler>();\n\n  component.registerSingleton<FileHistory>();\n\n  component.registerSingleton<FileDataExtensions>(() => [\n    component.get<FileHistory>(),\n  ]);\n\n  component.registerSingleton<FileHandlers>(() => [\n    component.get<LyricistantFileHandler>(),\n    component.get<TextFileHandler>(),\n  ]);\n  return component;\n};\n","import { RendererDelegate } from '@lyricistant/common/Delegates';\nimport { Logger } from '@lyricistant/common/Logger';\nimport { Manager } from '@lyricistant/common-platform/Manager';\nimport { Managers } from '@lyricistant/common-platform/Managers';\nimport { renderer } from '@web-platform/renderer';\nimport { expose, proxy } from 'comlink';\nimport { appComponent } from './AppComponent';\nimport { WebRendererDelegate } from './RendererDelegate';\n\nself.onerror = (error) => {\n  const availableLogger = appComponent?.get<Logger>() ?? console;\n  availableLogger.error('Web Platform crashed', error);\n\n  if (error instanceof ErrorEvent) {\n    renderer.onError(error.error);\n  } else if (typeof error === 'string') {\n    renderer.onError(error);\n  } else {\n    renderer.onError(error);\n  }\n};\nself.onunhandledrejection = (error) => {\n  self.onerror(error.reason);\n};\n\nconst start = () => {\n  try {\n    appComponent\n      .get<Managers>()\n      .forEach((manager: Manager) => manager.register());\n  } catch (e) {\n    self.onerror(e);\n  }\n};\n\nconst getRendererDelegate = () =>\n  appComponent.get<RendererDelegate>() as WebRendererDelegate;\n\nexport const receive = (channel: string, args: unknown[]) => {\n  getRendererDelegate().receive(channel, args);\n};\n\nconst getLogger = () => {\n  const logger = appComponent.get<Logger>();\n  return proxy(logger);\n};\n\nexport const onRendererListenerSet = (channel: string) => {\n  getRendererDelegate().onRendererListenerSet(channel);\n};\n\nexpose({\n  receive,\n  onRendererListenerSet,\n  getLogger,\n  start,\n});\n"],"names":["proxyMarker","Symbol","createEndpoint","releaseProxy","finalizer","throwMarker","isObject","val","transferHandlers","Map","canHandle","serialize","obj","port1","port2","MessageChannel","expose","deserialize","port","start","wrap","value","serialized","Error","isError","message","name","stack","Object","assign","ep","globalThis","allowedOrigins","addEventListener","callback","ev","data","origin","allowedOrigin","RegExp","test","isAllowedOrigin","console","warn","id","type","path","argumentList","map","fromWireValue","returnValue","parent","slice","reduce","prop","rawValue","apply","proxy","transfers","transferCache","set","transfer","undefined","Promise","resolve","catch","then","wireValue","transferables","toWireValue","postMessage","removeEventListener","closeEndPoint","error","TypeError","endpoint","constructor","isMessagePort","close","target","pendingListeners","resolver","get","delete","createProxy","throwIfProxyReleased","isReleased","releaseEndpoint","requestResponseMessage","proxyCounter","WeakMap","proxyFinalizers","FinalizationRegistry","newCount","isProxyReleased","Proxy","_target","unregister","unregisterProxy","clear","length","r","p","toString","bind","_thisArg","rawArgumentList","last","processArguments","construct","register","registerProxy","processed","v","arr","Array","prototype","concat","handler","serializedValue","msg","fill","Math","floor","random","Number","MAX_SAFE_INTEGER","join","renderer","self","provideUiConfig","showDownload","showOpen","Blob","File","showBrowserWarning","promptOnUrlChange","formatTitle","filename","trim","CONSTRUCTOR_ARGUMENTS_SYMBOL","for","DI_COMPILER_ERROR_HINT","InstantiationError","_InstantiationError","toStringTag","this","identifier","parentChain","options","originalError","super","item","currentOriginalError","head","body","tail","isClass","descriptor","getOwnPropertyDescriptor","writable","DIContainer","registerSingleton","newExpression","ReferenceError","registerTransient","has","kind","implementationArguments","implementation","instance","lazyPointer","_","key","registrationRecord","me","ref","mappedArgs","instanceArgs","dep","matchedParent","find","nextParentChain","constructedInstance","appComponent","component","dependencies","files","logger","preferences","recentFiles","systemThemeProvider","appData","buffers","uiConfigProvider","titleFormatter","rendererDelegate","times","registerCommonPlatform","extraManagers","registerCommonManagers","createComponent","onerror","ErrorEvent","onError","onunhandledrejection","reason","getRendererDelegate","receive","channel","args","onRendererListenerSet","getLogger","forEach","manager","e"],"sourceRoot":""}